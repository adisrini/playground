{
  "name": "graham_scan",
  "version": "1.0.2",
  "description": "Implementation of the Graham Scan algorithm to calculate a convex hull from a given array of x, y coordinates.",
  "license": "MIT",
  "main": "src/graham_scan.js",
  "directories": {
    "test": "test",
    "lib": "src"
  },
  "keywords": [
    "convex",
    "hull"
  ],
  "homepage": "http://brian3kb.github.io/graham_scan_js",
  "authors": [
    "Brian Barnett <brian@3kb.co.uk>"
  ],
  "repository": {
    "type": "git",
    "url": "git+https://github.com/brian3kb/graham_scan_js.git"
  },
  "devDependencies": {
    "bower": "~1.2.8",
    "grunt": "^0.4.5",
    "grunt-cli": "~0.1.12",
    "grunt-contrib-uglify": "^0.5.1"
  },
  "gitHead": "ea23ae62cd5ee686a91d4307712b10915b7db6b3",
  "readme": "## JavaScript Graham's Scan Convex Hull Algorithm\n\nI required a simple implementation to calculate a convex hull from a given array of x, y coordinates,\nthe convex hull's in js I found either were a little buggy, or required dependencies on other libraries.\nThis implementation just takes the x,y coordinates, no other libraries are needed.\n\nThese four examples show how to utilise with Google Maps:\n\n[Example 1](https://dl.dropboxusercontent.com/u/26246816/graham_scan/example/gmaps_example1.html)\n[Example 2](https://dl.dropboxusercontent.com/u/26246816/graham_scan/example/gmaps_example2.html)\n[Example 3](https://dl.dropboxusercontent.com/u/26246816/graham_scan/example/gmaps_example3.html)\n[Example 4](https://dl.dropboxusercontent.com/u/26246816/graham_scan/example/gmaps_example4.html)\n\nView [GitHub pages](http://brian3kb.github.io/graham_scan_js)\n\n### Building\n\nThis produces `graham_scan.min.js`:\n\n\tnpm install\n\tgrunt build\n\n### Testing\n\nThe source is tested with qUnit, tests executed with Google's JS Test Driver.\n\n### Usage\n\n    //Create a new instance.\n    var convexHull = new ConvexHullGrahamScan();\n\n    //add points (needs to be done for each point, a foreach loop on the input array can be used.)\n    convexHull.addPoint(x, y);\n\n    //getHull() returns the array of points that make up the convex hull.\n    var hullPoints = convexHull.getHull();\n    \n### Algorithm\n\n\tGRAHAM_SCAN(Q)\n\t    Find p0 in Q with minimum y-coordinate (and minimum x-coordinate if there are ties).\n\t    Sort the remaining points of Q (that is, Q − {p0}) by polar angle in counterclockwise order with respect to p0.\n\t    TOP [S] = 0                ▷ Lines 3-6 initialize the stack to contain, from bottom to top, first three points.\n\t    PUSH (p0, S)\n\t    PUSH (p1, S)\n\t    PUSH (p2, S)\n\t    for i = 3 to m             ▷ Perform test for each point p3, ..., pm.\n\t        do while the angle between NEXT_TO_TOP[S], TOP[S], and pi makes a non-left turn  ▷ remove if not a vertex\n\t            do POP(S)\n\t            PUSH (S, pi)\n\t    return S\n\n### References\n\n* http://www.personal.kent.edu/~rmuhamma/Compgeometry/MyCG/ConvexHull/GrahamScan/grahamScan.htm\n* http://en.wikipedia.org/wiki/Graham_scan\n\n### License\n\nMIT License\n",
  "readmeFilename": "readme.md",
  "bugs": {
    "url": "https://github.com/brian3kb/graham_scan_js/issues"
  },
  "_id": "graham_scan@1.0.2",
  "_shasum": "fc12e8cd96bae721b06ae2988c43fef2f97ab1d3",
  "_from": "mathisonian/graham_scan_js",
  "_resolved": "git://github.com/mathisonian/graham_scan_js.git#ea23ae62cd5ee686a91d4307712b10915b7db6b3"
}
